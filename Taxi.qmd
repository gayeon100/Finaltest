---
---
title: "NYCTaxi"
author: "이가연"
format: dashboard
execute: 
  enabled: true
  cache: false
  freeze: false
---

```{python}
# | output: false
import numpy as np
import pandas as pd
import plotly.express as px
import plotly.io as pio
import json
import requests
import pickle
pd.options.plotting.backend = "plotly"
pio.templates.default = "plotly_white"
df = pd.read_csv("https://raw.githubusercontent.com/guebin/DV2023/main/posts/NYCTaxi.csv").assign(
    log_trip_duration = lambda df: np.log(df.trip_duration),
    pickup_datetime = lambda df: df.pickup_datetime.apply(pd.to_datetime),
    dropoff_datetime = lambda df: df.dropoff_datetime.apply(pd.to_datetime),
    dist = lambda df: np.sqrt((df.pickup_latitude-df.dropoff_latitude)**2 + (df.pickup_longitude-df.dropoff_longitude)**2),
    #---#
    vendor_id = lambda df: df.vendor_id.map({1:'A',2:'B'})
).assign(
    speed = lambda df: df.dist / df.trip_duration,
    pickup_hour = lambda df: df.pickup_datetime.dt.hour,
    dropoff_hour = lambda df: df.dropoff_datetime.dt.hour,
    dayofweek = lambda df: df.pickup_datetime.dt.dayofweek
)
df_small = df[::100].reset_index(drop=True)
# 1-(1),(2),(3) 에 대응하는 plotly figure를 아래와 같은 이름으로 저장
# fig1 =...
# fig2 =...
# fig3 = ...
```

# 기말고사1-(1),(2)

```{python}
# | title: 요일,시간에 따른 평균속력 시각화  
day_map = {0: '월', 1: '화', 2: '수', 3: '목', 4: '금', 5: '토', 6: '일'}
df_s=df_small.set_index('dayofweek')\
.rename(day_map).reset_index()
tidydata = df_s.pivot_table(
    index = 'pickup_hour',
    columns = 'dayofweek',
    values = 'speed',
    aggfunc = 'mean'
).stack().reset_index().rename({0:'speed_mean'},axis=1)\
.sort_values('dayofweek')\
.rename({'dayofweek':'요일','pickup_hour':'pickup시간'},axis=1)
weekday_order = ['월', '화', '수', '목', '금', '토', '일']
tidydata['요일'] = pd.Categorical(tidydata['요일'], categories=weekday_order, ordered=True)
tidydata = tidydata.sort_values('요일')
fig1=px.density_heatmap(
    data_frame=tidydata,
    x='pickup시간',
    y='요일',
    z='speed_mean',
    nbinsx=24,
    nbinsy=7,
    height=300
)
fig1.show()
```

```{python}
# | title: 요일,시간에 따른 평균이동거리 시각화
tidydata2 = df_s.pivot_table(
    index = 'pickup_hour',
    columns = 'dayofweek',
    values = 'dist',
    aggfunc = 'mean'
).stack().reset_index().rename({0:'dist_mean'},axis=1)\
.rename({'dayofweek':'요일','pickup_hour':'pickup시간','dist_mean':'평균이동거리'},axis=1)

weekday_order = ['월', '화', '수', '목', '금', '토', '일']
tidydata2['요일'] = pd.Categorical(tidydata2['요일'], categories=weekday_order, ordered=True)
tidydata2 = tidydata2.sort_values('요일').reset_index()
fig2=px.density_heatmap(
    data_frame=tidydata2,
    x='pickup시간',
    y='요일',
    z='평균이동거리',
    nbinsx=24,
    nbinsy=7,
    height=300
)
fig2.show()
```

# 기말고사1-(3)

```{python}
# | title: 속력별 경로 시각화
tidydata3 = df_small.assign(
    speed_cut = pd.qcut(df_small.speed,4)
).sort_values('speed_cut')
pcol = ['pickup_datetime', 'pickup_longitude', 'pickup_latitude', 'pickup_hour']
dcol = ['dropoff_datetime', 'dropoff_longitude', 'dropoff_latitude', 'dropoff_hour']
def transform(df):
    pickup = df.loc[:,['id']+pcol].set_axis(['id', 'datetime', 'longitude', 'latitude', 'hour'],axis=1).assign(type = 'pickup')
    dropoff = df.loc[:,['id']+dcol].set_axis(['id', 'datetime', 'longitude', 'latitude', 'hour'],axis=1).assign(type = 'dropoff')
    return pd.concat([pickup,dropoff],axis=0)
df_left = tidydata3.drop(pcol+dcol,axis=1)
df_right = pd.concat([transform(df) for i, df in tidydata3.groupby('id')]).reset_index(drop=True)
tidydata3 = df_left.merge(df_right)

fig = px.line_mapbox(
    data_frame=tidydata3,
    lat = 'latitude',
    lon = 'longitude',
    line_group = 'id',
    color = 'speed_cut',
    center = {'lat':40.7322, 'lon':-73.9052},
    #---#
    mapbox_style = 'carto-positron',
    zoom=10,
    width = 750,
    height = 600
)
scatter_data = px.scatter_mapbox(
    data_frame=tidydata3,
    lat = 'latitude',
    lon = 'longitude',
    size = 'passenger_count',
    size_max = 10,
    color = 'speed_cut',
    #---#
    mapbox_style = 'carto-positron',
    zoom=10,
    width = 750,
    height = 600
).data 
for sd in scatter_data: 
    fig.add_trace(sd)
fig.update_traces(
    line={
        'width':1
    },
    opacity=0.8
)
fig.show(config={'scrollZoom':False})

```